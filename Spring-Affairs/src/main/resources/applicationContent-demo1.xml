<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 引入外部属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--配置druid连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc_url}" />
        <property name="username" value="${jdbc_user}" />
        <property name="password" value="${jdbc_password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>

    <!-- 配置Service的类 -->
    <bean id="transferService" class="com.van.com.van.dusty.service.demo1.TransferServiceImpl_demo1">
    </bean>

    <!-- 配置Dao的类 -->
    <bean id="transferDao" class="com.van.com.van.dusty.dao.TransferDaoImpl">
        <!-- 为了使Dao层操作数据库，继承了spring-jdbc的模版类，需要在Dao中注入连接池-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- Spring声明式事务管理:基于Aspectj的XML方式的配置 -->
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置事务的通知（事务增强） -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes> <!--//哪些方法执行事务 -->
            <tx:method name="transferForOther" propagation="REQUIRED" /><!-- 本案例方法 -->
            <!-- 修改 保存 删除 -->
            <!--<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>-->
            <!--<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>-->
            <!--&lt;!&ndash; 查询方法只读 &ndash;&gt;-->
            <!--<tx:method name="get*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="list*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="query*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="find*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="load*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="search*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="datagrid*" propagation="SUPPORTS"/>-->
        </tx:attributes>
    </tx:advice>
    <!-- 配置切面 -->
    <aop:config>
        <!-- 配置切入点 -->
        <aop:pointcut id="transactionPointcut" expression="execution(* com.van.com.van.dusty.service.demo1.*.*(..))" />
        <!-- execution（）表达式中*表示任意的返回值   后面表示路径，最后有`+`表示它的子类，`.*`表示任意的方法，`(..)`表示任意的参数，-->
        <!-- 配置切面(包含advisor和aspect两种) -->
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>
</beans>